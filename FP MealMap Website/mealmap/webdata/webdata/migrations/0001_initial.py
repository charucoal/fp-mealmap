# Generated by Django 4.2.16 on 2025-01-30 14:22

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Business",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("address", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="BusinessInfo",
            fields=[
                ("business_id", models.AutoField(primary_key=True, serialize=False)),
                ("business_name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("address", models.TextField()),
                ("long", models.FloatField(default=1)),
                ("lat", models.FloatField(default=1)),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("opening_time", models.TimeField()),
                ("closing_time", models.TimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("verified", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("phone_number", models.CharField(max_length=15)),
                (
                    "email",
                    models.CharField(default="charu.sgp@gmail.com", max_length=255),
                ),
                ("address", models.CharField(max_length=255)),
                ("sms_alert", models.BooleanField(default=True)),
                ("email_alert", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="CustomerInfo",
            fields=[
                ("customer_id", models.AutoField(primary_key=True, serialize=False)),
                ("first_name", models.CharField(max_length=255)),
                (
                    "middle_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("last_name", models.CharField(max_length=255)),
                ("date_of_birth", models.DateField()),
                ("country", django_countries.fields.CountryField(max_length=2)),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("address", models.TextField()),
                ("long", models.FloatField(default=1)),
                ("lat", models.FloatField(default=1)),
                (
                    "alert_radius",
                    models.IntegerField(
                        choices=[(3, "3KM"), (5, "5KM"), (10, "10KM")], default=3
                    ),
                ),
                ("sms_alert", models.BooleanField(default=True)),
                ("email_alert", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="FoodLog",
            fields=[
                ("item_id", models.AutoField(primary_key=True, serialize=False)),
                ("food_item", models.CharField(max_length=255)),
                ("quantity", models.IntegerField()),
                ("total_units", models.IntegerField()),
                ("curr_quantity", models.IntegerField()),
                ("price_per_unit", models.FloatField()),
                ("units", models.CharField(max_length=50)),
                ("expiry_date", models.DateTimeField()),
                (
                    "avail_status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("reserved", "Reserved"),
                            ("expired", "Expired"),
                        ],
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "business",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.businessinfo",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="newtable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("second", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="PurchaseLog",
            fields=[
                ("purchase_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "date_purchased",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("quantity", models.IntegerField()),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.customerinfo",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.foodlog",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FoodItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("item_name", models.CharField(max_length=255)),
                ("quantity_per_unit", models.IntegerField()),
                ("unit", models.CharField(max_length=50)),
                (
                    "price_per_unit",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("total_units", models.IntegerField()),
                ("expiry_date", models.DateField()),
                (
                    "business",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.business",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Alert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("alert_sent_at", models.DateTimeField(auto_now_add=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.customer",
                    ),
                ),
                (
                    "food_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.fooditem",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("customer", "Customer"),
                            ("business", "Business"),
                            ("admin", "Admin"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "account_type2",
                    models.CharField(
                        choices=[
                            ("customer", "Customer"),
                            ("business", "Business"),
                            ("admin", "Admin"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "business",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.businessinfo",
                    ),
                ),
                (
                    "customer",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.customerinfo",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ReservationLog",
            fields=[
                ("res_id", models.AutoField(primary_key=True, serialize=False)),
                ("quantity", models.IntegerField()),
                (
                    "reservation_date_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("collected", models.BooleanField(default=False)),
                ("collection_date_time", models.DateTimeField(blank=True, null=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.customerinfo",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.foodlog",
                    ),
                ),
            ],
            options={
                "unique_together": {("item", "customer")},
            },
        ),
        migrations.CreateModel(
            name="DietaryNeeds",
            fields=[
                ("dietary_id", models.AutoField(primary_key=True, serialize=False)),
                ("dietary_pref", models.CharField(max_length=255)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webdata.customerinfo",
                    ),
                ),
            ],
            options={
                "unique_together": {("customer", "dietary_pref")},
            },
        ),
    ]
